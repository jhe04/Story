CREATING LOCAL REPOSITORY

to initialize git, use:
'git init' inside the terminal

In order to track the file you're making changes to, you'll need to put it into a staging area. This is essentially an intermediate place where you can choose and pick which files inside your working directory you want to commit

Flow for Git:
Working directory --add--> Staging Area --commit--> Local Repository
-> the reason we have a staging area as a middle ground is to figure out which files we actually want to commit, since you may not want all of your files to be committed.

To see what's currently inside the staging area of your working directory, use:
'git status' inside the terminal
-> untracked files show up in red. This means these are files inside your working directory, but is not yet in the staging area

To add an untracked file into the staging area, use:
'git add filename' in terminal

To commit the file under version control, use:
git commit -m "message you want to say"
--> '-m' flag adds a commit message. This is important to help keep track of what changes you have made in each commit. When you create a new save point, you want to be as explicit as possible about what changes were made between the last save point and the current save point.

You can see what commits you have made using:
'git log' in terminal
--> the hash uniquely identifies this specific commit (usually a long chain of numbers and letters)
--> at the very end, you see the commit message

Instead of adding files 1 by 1 into staging area, use:
'git add .' to add EVERYTHING inside the current directory into staging

Can revert back to the latest version inside the local repository:
--> For example, after making an initial commit to file 'chapter3.txt', make random changes and save it on the file. Then use 'git status', and you'll see 'modified', which shows which files have been changed since the previous commit.
--> Use 'git diff filename' to check difference between previous version in repository and current version.
--> use 'git checkout filename' to rollback file to last version that was committed in our local repository

CREATING REMOTE REPOSITORY

Go to Github and create a new repository.
--> create a remote using 'git remote add origin githubRepositoryURL'. By convention, use 'origin', but it can technically be named anything you want.
--> next, push the local repository into the remote repository using:
'git push -u origin master'; push a local repository onto this origin remote, and we're going to push it to the master branch.
--> '-u' flag links your local and remote repository. 'origin' is the name of Remote, and 'master' is name of Branch. Mater branch is the default/main branch of all your commits (it is sequential).
